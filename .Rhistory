time = factor(time) %>%
mutate(Status = case_when(
startsWith(time, "165") ~ "DB",
startsWith(time, "165") ~ "DB",
startsWith(time, "165") ~ "DB",
startsWith(time, "165") ~ "DB",
startsWith(time, "165") ~ "DB",
))
diff_season %>%
time = factor(time) %>%
mutate(Status = case_when(
startsWith(time, "165") ~ "DB",
startsWith(time, "166") ~ "AB",
))
diff_season %>%
time = as.numeric(time) %>%
mutate(Status = case_when(
startsWith(time, "165") ~ "DB",
startsWith(time, "166") ~ "AB",
))
diff_season %>%
mutate(time = as.numeric(time)) %>%
mutate(Status = case_when(
startsWith(time, "165") ~ "DB",
startsWith(time, "166") ~ "AB",
))
diff_season %>%
mutate(time = as.numeric(time)) %>%
mutate(Status = case_when(
startsWith(time, 165) ~ "DB",
startsWith(time, 166) ~ "AB",
))
library(readxl)
season <- read_excel("season.xlsx")
View(season)
View ( t.test(diff ~ Site, data = afterBloom_diff))
t.test(diff ~ Site, data = afterBloom_diff)
t.test(diff ~ season, data =season)
ggplot(data2022_hive_site_proc, aes(Local_TimesTamp, Weight *0.45, color = Hive)) +
geom_point() +
xlab("Time") +
ylab(" Hourly Hive Weight (Kg)")+
facet_wrap(~Site)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rstatix)
scale01 <- X49_03_BA
scale02 <- X49_03_BF
scale03 <- X49_03_C2
scale04 <- X49_03_B4
scale05 <- X49_03_C4
scale06 <- X49_03_C5
scale07 <- X49_03_C7
scale08 <- X49_03_B9
data2022 <- rbind (scale01, scale03, scale04, scale06, scale07, scale08)
data2022_hive_site <- data2022 %>%
mutate(Hive = case_when(
endsWith(UUID, "A") ~ "1",
endsWith(UUID, "2") ~ "2",
endsWith(UUID, "B4") ~ "1",
endsWith(UUID, "C5") ~ "2",
endsWith(UUID,"C7") ~ "3",
endsWith(UUID, "B9") ~ "4",
)) %>%
mutate(Site = case_when(
endsWith(UUID, "A") ~ "Petrofika",
endsWith(UUID, "2") ~ "Petrofika",
endsWith(UUID, "B4") ~ "Goodale",
endsWith(UUID, "C5") ~ "Goodale",
endsWith(UUID,"C7") ~ "Goodale",
endsWith(UUID, "B9") ~ "Goodale",
))
scales_func <- function(x, ftrim, btrim) {
x %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
dplyr::mutate(Local_TimesTamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Site = factor(Site), # make site a factor
time = as.numeric(Local_TimesTamp), # make TimeStamp_round numeric
UUID = factor(UUID)) %>% # make ScaleID a factor
dplyr::select(Local_TimesTamp, time,Site, UUID, Hive, Weight) %>%
dplyr::filter(Local_TimesTamp > ftrim & Local_TimesTamp < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Local_TimesTamp) # arrange chronologically within ScaleID
}
data2022_hive_site_proc <- scales_func(data2022_hive_site,
ftrim = "2022-06-01",
btrim = "2022-09-15"
)
duringBloom <- scales_func(data2022_hive_site, ftrim = "2022-07-22", btrim = "2022-07-27")
afterBloom <- scales_func(data2022_hive_site, ftrim = "2022-08-19", btrim = "2022-08-25")
data2022_midnight <- data2022_hive_site_proc %>%
dplyr::filter(hour(Local_TimesTamp) == 00:00:00)
data2022_diff <- data2022_hive_site_proc %>%
dplyr::filter(hour(Local_TimesTamp) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Local_TimesTamp) %>%
dplyr::mutate(diff = Weight - lag(Weight, default = first(Weight)))
duringBloom_diff <- duringBloom %>%
dplyr::filter(hour(Local_TimesTamp) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Local_TimesTamp) %>%
dplyr::mutate(diff = Weight - lag(Weight, default = first(Weight)))
afterBloom_diff <- afterBloom %>%
dplyr::filter(hour(Local_TimesTamp) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Local_TimesTamp) %>%
dplyr::mutate(diff = Weight - lag(Weight, default = first(Weight)))
ggplot(data2022_hive_site_proc, aes(Local_TimesTamp, Weight *0.45, color = Hive)) +
geom_point() +
xlab("Time") +
ylab(" Hourly Hive Weight (Kg)")+
facet_wrap(~Site)
ggplot(data2022_midnight, aes(Local_TimesTamp, Weight *0.45, color = Hive)) +
geom_point() +
xlab("Time") +
ylab("Daily Hive Weight (Kg)")+
facet_wrap(~Site)
ggplot(data2022_diff, aes(Local_TimesTamp, diff *0.45, color = Hive)) +
geom_point() +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
ggplot(data2022_diff, aes(Local_TimesTamp, diff *0.45, color = Hive)) +
geom_point() +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
ylim(-10,10) +
facet_wrap(~Site)
ggplot(duringBloom_diff, aes(Local_TimesTamp, diff *0.45, color = Hive)) +
geom_point( size = 3) +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
ggplot(afterBloom_diff, aes(Local_TimesTamp, diff *0.45, color = Hive)) +
geom_point(size = 3) +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
group_by(duringBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff *0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)
t.test(diff ~ Site, data = afterBloom_diff)
print(t.test(diff ~ Site, data = duringBloom_diff))
summaryDB <- group_by(duringBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff *0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)
View(summaryDB)
summarySeadon <- group_by(season, season) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)
summaryAB <- group_by(afterBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)
View(summaryAB)
View(summarySeadon)
t.test(diff ~ Site, data = afterBloom_diff)
summaryAB <- group_by(afterBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)  %>%
mutate (pvalue = 0.001 )
t.test(diff ~ Site, data = afterBloom_diff)
t.test(diff ~ Site, data = duringBloom_diff)
summaryAB <- group_by(afterBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)  %>%
mutate (pvalue = 0.24 )
summaryAB <- group_by(afterBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)  %>%
mutate (pvalue = 0.001)
summaryDB <- group_by(duringBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff *0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)%>%
mutate (pvalue = 0.024)
summaryAB <- group_by(afterBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)  %>%
mutate (pvalue = 0.001)
t.test(diff ~ season, data =season)
summarySeason<- group_by(season, season) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
) %>%
mutate (pvalue = 0.003)
View(summarySeason)
# 1 - Loading Packages
install.packages(dplyr)
# 1 - Loading Packages
install.packages("dplyr")
install.packages("dplyr")
View(X49_03_B4)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rstatix)
scale01 <- X49_03_BA
scale02 <- X49_03_BF
scale03 <- X49_03_C2
scale04 <- X49_03_B4
scale05 <- X49_03_C4
scale06 <- X49_03_C5
scale07 <- X49_03_C7
scale08 <- X49_03_B9
data2022 <- rbind (scale01, scale03, scale04, scale06, scale07, scale08)
data2022_hive_site <- data2022 %>%
mutate(Hive = case_when(
endsWith(UUID, "A") ~ "1",
endsWith(UUID, "2") ~ "2",
endsWith(UUID, "B4") ~ "1",
endsWith(UUID, "C5") ~ "2",
endsWith(UUID,"C7") ~ "3",
endsWith(UUID, "B9") ~ "4",
)) %>%
mutate(Site = case_when(
endsWith(UUID, "A") ~ "Petrofika",
endsWith(UUID, "2") ~ "Petrofika",
endsWith(UUID, "B4") ~ "Goodale",
endsWith(UUID, "C5") ~ "Goodale",
endsWith(UUID,"C7") ~ "Goodale",
endsWith(UUID, "B9") ~ "Goodale",
))
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID)) %>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically within ScaleID
data2022_hive_site_proc <- scales_func(data2022_hive_site,   #your data
ftrim = "2022-06-01", #start date
btrim = "2022-09-15"  #end date
)
View(data2022_hive_site_proc)
1
q
quit
:q
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID)) %>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically within ScaleID
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID)) %>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically within ScaleID
}
q
:q
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID)) %>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically within ScaleID
}
data2022_hive_site_proc <- scales_func(data2022_hive_site,   #your data
ftrim = "2022-06-01", #start date
btrim = "2022-09-15"  #end date
)
View(data2022_hive_site_proc)
data2022_midnight <- data2022_hive_site_proc %>%
filter(hour(Time) == 00:00:00)
View(data2022_midnight)
View(data2022_midnight)
data2022_scales_proc<- scales_func(data2022_hive_site,   #your data
ftrim = "2022-06-01", #start date
btrim = "2022-09-15"  #end date
)
View(data2022_scales_proc)
data2022_midnight <- data2022_scales_proc %>%
filter(hour(Time) == 00:00:00)
View(data2022_midnight)
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID)), #make UUID a factor
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID), #make UUID a factor
Weight = Weight *0.45 %>% #transforming Weight from lbs to kg%>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically within ScaleID
}
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID), #make UUID a factor
Weight = Weight *0.45 %>% #transforming Weight from lbs to kg%>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically within ScaleID
}
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID), #make UUID a factor
Weight = Weight *0.45 %>% #transforming Weight from lbs to kg%>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically
}
scales_func <- function(data, ftrim, btrim) {
data %>%
mutate(Local_TimeStamp = as.POSIXct(Local_TimeStamp,format = "%m/%d/%Y %H:%M" )) %>%
mutate(Local_TimeStamp = lubridate::ceiling_date(Local_TimeStamp, unit = "hour"), # round Time Stamp to nearest hour
Time = Local_TimeStamp, #change Local_TimeStamp to time
Site = factor(Site), # make site a factor
UUID = factor(UUID), #make UUID a factor
Weight = Weight *0.45 )%>% #transforming Weight from lbs to kg%>% # make the UUID a factor
select(Time, Site, UUID, Hive, Weight) %>% #Select only the desired data
filter(Time > ftrim & Time < btrim) %>% # trim data to desired start and end dates
group_by(UUID) %>%
arrange(Time) # arrange chronologically
}
data2022_scales_proc<- scales_func(data2022_hive_site,   #your data
ftrim = "2022-06-01", #start date
btrim = "2022-09-15"  #end date
)
View(data2022_scales_proc)
data2022_midnight <- data2022_scales_proc %>%
filter(hour(Time) == 00:00:00)
View(data2022_midnight)
data2022_diff <- data2022_midnight %>%
group_by(UUID) %>%
arrange(Time) %>%
mutate(diff = Weight - lag(Weight, default = first(Weight)))
View(data2022_diff)
# 9 - Plotting raw data (hourly) graph
ggplot(data2022_scales_proc, aes(Time, Weight, color = Hive)) +
geom_point() +
xlab("Time") +
ylab(" Hourly Hive Weight (Kg)")+
facet_wrap(~Site)
ggplot(data2022_midnight, aes(Time, Weight, color = Hive)) +
geom_point() +
xlab("Time") +
ylab("Daily Hive Weight (Kg)")+
facet_wrap(~Site)
ggplot(data2022_diff, aes(Time, diff, color = Hive)) +
geom_point() +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
duringBloom <- scales_func(data2022_hive_site, ftrim = "2022-07-22", btrim = "2022-07-27")
afterBloom <- scales_func(data2022_hive_site, ftrim = "2022-08-19", btrim = "2022-08-25")
duringBloom_diff <- duringBloom %>%
filter(hour(Local_TimesTamp) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Local_TimesTamp) %>%
mutate(diff = Weight - lag(Weight, default = first(Weight)))
duringBloom_diff <- duringBloom %>%
filter(hour(Time) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Time) %>%
mutate(diff = Weight - lag(Weight, default = first(Weight)))
afterBloom_diff <- afterBloom %>%
filter(hour(TIme) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Time) %>%
mutate(diff = Weight - lag(Weight, default = first(Weight)))
afterBloom_diff <- afterBloom %>%
filter(hour(Time) == 00:00:00) %>%
group_by(UUID) %>%
arrange(Time) %>%
mutate(diff = Weight - lag(Weight, default = first(Weight)))
ggplot(duringBloom_diff, aes(Local_TimesTamp, diff *0.45, color = Hive)) +
geom_point( size = 3) +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
ggplot(duringBloom_diff, aes(Time, diff, color = Hive)) +
geom_point( size = 3) +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
ggplot(afterBloom_diff, aes(Time, diff *0.45, color = Hive)) +
geom_point(size = 3) +
xlab("Time") +
ylab("Within-day Hive Weight Change (Kg)")+
facet_wrap(~Site)
# 4 - Statistics tests
## Check normality (Shapiro Wilk)
season <-season
shapiro.test(duringBloom_diff$diff)
shapiro.test(afterBloom_diff$diff)
summaryDB <- group_by(duringBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff *0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)%>%
mutate (pvalue = 0.024)
summaryAB <- group_by(afterBloom_diff, Site) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
)  %>%
mutate (pvalue = 0.001)
summarySeason<- group_by(season, season) %>%
summarise(
count = n(),
mean = mean(diff*0.45, na.rm = TRUE),
sd = sd(diff*0.45, na.rm = TRUE),
median = median(diff*0.45, na.rm = TRUE),
IQR = IQR(diff*0.45, na.rm = TRUE)
) %>%
mutate (pvalue = 0.003)
t.test(diff ~ Site, data = afterBloom_diff)
t.test(diff ~ Site, data = duringBloom_diff)
t.test(diff ~ Site, data = afterBloom_diff)
t.test(diff ~ season, data =season)
